#include <string.h>

#include "apu.h"
#include "cartridge.h"
#include "cpu.h"
#include "gameboy.h"
#include "mmu.h"
#include "ppu.h"

#include "bios_bin.h"
#include "dummy_bios_bin.h"

static const u8 initialHramGB[0x100] = {
        0xCF, 0x00, 0x7E, 0xFF, 0xD3, 0x00, 0x00, 0xF8,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
        0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,
        0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
        0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x71, 0x72, 0xD5, 0x91, 0x58, 0xBB, 0x2A, 0xFA,
        0xCF, 0x3C, 0x54, 0x75, 0x48, 0xCF, 0x8F, 0xD9,
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC,
        0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x2B, 0x0B, 0x64, 0x2F, 0xAF, 0x15, 0x60, 0x6D,
        0x61, 0x4E, 0xAC, 0x45, 0x0F, 0xDA, 0x92, 0xF3,
        0x83, 0x38, 0xE4, 0x4E, 0xA7, 0x6C, 0x38, 0x58,
        0xBE, 0xEA, 0xE5, 0x81, 0xB4, 0xCB, 0xBF, 0x7B,
        0x59, 0xAD, 0x50, 0x13, 0x5E, 0xF6, 0xB3, 0xC1,
        0xDC, 0xDF, 0x9E, 0x68, 0xD7, 0x59, 0x26, 0xF3,
        0x62, 0x54, 0xF8, 0x36, 0xB7, 0x78, 0x6A, 0x22,
        0xA7, 0xDD, 0x88, 0x15, 0xCA, 0x96, 0x39, 0xD3,
        0xE6, 0x55, 0x6E, 0xEA, 0x90, 0x76, 0xB8, 0xFF,
        0x50, 0xCD, 0xB5, 0x1B, 0x1F, 0xA5, 0x4D, 0x2E,
        0xB4, 0x09, 0x47, 0x8A, 0xC4, 0x5A, 0x8C, 0x4E,
        0xE7, 0x29, 0x50, 0x88, 0xA8, 0x66, 0x85, 0x4B,
        0xAA, 0x38, 0xE7, 0x6B, 0x45, 0x3E, 0x30, 0x37,
        0xBA, 0xC5, 0x31, 0xF2, 0x71, 0xB4, 0xCF, 0x29,
        0xBC, 0x7F, 0x7E, 0xD0, 0xC7, 0xC3, 0xBD, 0xCF,
        0x59, 0xEA, 0x39, 0x01, 0x2E, 0x00, 0x69, 0x00
};

static const u8 initialHramCGB[0x100] = {
        0xCF, 0x00, 0x7C, 0xFF, 0x44, 0x00, 0x00, 0xF8,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
        0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,
        0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
        0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
        0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
        0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
        0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
        0x45, 0xEC, 0x42, 0xFA, 0x08, 0xB7, 0x07, 0x5D,
        0x01, 0xF5, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
        0x0B, 0xF8, 0xC2, 0xCA, 0xF4, 0xF9, 0x0D, 0x7F,
        0x44, 0x6D, 0x19, 0xFE, 0x46, 0x97, 0x33, 0x5E,
        0x08, 0xFF, 0xD1, 0xFF, 0xC6, 0x8B, 0x24, 0x74,
        0x12, 0xFC, 0x00, 0x9F, 0x94, 0xB7, 0x06, 0xD5,
        0x40, 0x7A, 0x20, 0x9E, 0x04, 0x5F, 0x41, 0x2F,
        0x3D, 0x77, 0x36, 0x75, 0x81, 0x8A, 0x70, 0x3A,
        0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF,
        0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00
};

MMU::MMU(Gameboy* gameboy) {
    this->gameboy = gameboy;
}

void MMU::reset() {
    memset(this->banks, 0, sizeof(this->banks));
    memset(this->bankReadFuncs, 0, sizeof(this->bankReadFuncs));
    memset(this->bankWriteFuncs, 0, sizeof(this->bankWriteFuncs));

    memset(this->ioReadFuncs, 0, sizeof(this->ioReadFuncs));
    memset(this->ioWriteFuncs, 0, sizeof(this->ioWriteFuncs));

    for(int i = 0; i < 8; i++) {
        memset(this->wram[i], 0, sizeof(this->wram[i]));
    }

    memcpy(this->hram, this->gameboy->gbMode == MODE_CGB ? (const u8*) initialHramCGB : initialHramGB, sizeof(this->hram));

    this->biosMapped = true;
    this->useRealBios = this->gameboy->settings.biosEnabled;

    this->mapBanks();

    this->gameboy->mmu->mapIOReadFunc(RP, [this](u16 addr) -> u8 {
        u8 rp = this->gameboy->mmu->readIO(RP);
        if(this->gameboy->gbMode == MODE_CGB) {
            return rp | (u8) ((rp & 0xC0) == 0xC0 && this->gameboy->settings.getIRState() ? 0x0 : 0x2);
        } else {
            return rp;
        }
    });

    this->gameboy->mmu->mapIOWriteFunc(BIOS, [this](u16 addr, u8 val) -> void {
        if(this->biosMapped) {
            this->biosMapped = false;
            this->mapBanks();
        }
    });

    this->gameboy->mmu->mapIOWriteFunc(RP, [this](u16 addr, u8 val) -> void {
        if(this->gameboy->gbMode == MODE_CGB) {
            this->gameboy->mmu->writeIO(RP, (u8) ((val & ~0x2) | 0x3C));
            this->gameboy->settings.setIRState((val & 0x1) == 1);
        }
    });

    this->gameboy->mmu->mapIOWriteFunc(SVBK, [this](u16 addr, u8 val) -> void {
        if(this->gameboy->gbMode == MODE_CGB) {
            this->gameboy->mmu->writeIO(SVBK, (u8) (val | 0xF8));
            this->mapBanks();
        }
    });
}

void MMU::loadState(std::istream& data, u8 version) {
    data.read((char*) this->wram, sizeof(this->wram));
    data.read((char*) this->hram, sizeof(this->hram));
    data.read((char*) &this->biosMapped, sizeof(this->biosMapped));
    data.read((char*) &this->useRealBios, sizeof(this->useRealBios));

    this->mapBanks();
}

void MMU::saveState(std::ostream& data) {
    data.write((char*) this->wram, sizeof(this->wram));
    data.write((char*) this->hram, sizeof(this->hram));
    data.write((char*) &this->biosMapped, sizeof(this->biosMapped));
    data.write((char*) &this->useRealBios, sizeof(this->useRealBios));
}

u8 MMU::read(u16 addr) {
    u8 area = (u8) (addr >> 12);
    if(this->bankReadFuncs[area] != NULL) {
        return this->bankReadFuncs[area](addr);
    } else if(this->banks[area] != NULL) {
        return this->banks[area][addr & 0xFFF];
    } else {
        if(this->gameboy->settings.printDebug != NULL) {
            this->gameboy->settings.printDebug("Attempted to read from unmapped memory bank: 0x%x\n", area);
        }

        return 0xFF;
    }
}

void MMU::write(u16 addr, u8 val) {
    u8 area = (u8) (addr >> 12);
    if(this->bankWriteFuncs[area] != NULL) {
        this->bankWriteFuncs[area](addr, val);
    } else if(this->banks[area] != NULL) {
        this->banks[area][addr & 0xFFF] = val;
    } else {
        if(this->gameboy->settings.printDebug != NULL) {
            this->gameboy->settings.printDebug("Attempted to write to unmapped memory bank: 0x%x\n", area);
        }
    }
}

void MMU::mapBanks() {
    u8 wramBank = (u8) (this->readIO(SVBK) & 0x7);

    this->mapBankBlock(0xC, this->wram[0]);
    this->mapBankBlock(0xD, this->wram[wramBank != 0 ? wramBank : 1]);
    this->mapBankBlock(0xE, this->wram[0]);

    if(this->biosMapped) {
        this->mapBankReadFunc(0x0, [this](u16 addr) -> u8 {
            if(addr < 0x100 || (addr >= 0x200 && addr <= 0x8FF)) {
                return (this->useRealBios ? bios_bin : dummy_bios_bin)[addr & 0xFFF];
            } else if(this->banks[0x0] != NULL) {
                return this->banks[0x0][addr & 0xFFF];
            }

            return 0xFF;
        });
    } else {
        this->mapBankReadFunc(0x0, NULL);
    }

    this->mapBankReadFunc(0xF, [this](u16 addr) -> u8 {
        if(addr >= 0xFF00) {
            u8 reg = (u8) (addr & 0xFF);
            if(this->ioReadFuncs[reg] != NULL) {
                return this->ioReadFuncs[reg](addr);
            } else {
                return this->hram[reg];
            }
        } else if(addr >= 0xFE00 && addr < 0xFEA0) {
            return this->gameboy->ppu->readOam(addr);
        } else if(addr < 0xFE00) {
            u8 currWramBank = (u8) (this->readIO(SVBK) & 0x7);
            return this->wram[currWramBank != 0 ? currWramBank : 1][addr & 0xFFF];
        }

        return 0;
    });

    this->mapBankWriteFunc(0xF, [this](u16 addr, u8 val) -> void {
        if(addr >= 0xFF00) {
            u8 reg = (u8) (addr & 0xFF);
            if(this->ioWriteFuncs[reg] != NULL) {
                this->ioWriteFuncs[reg](addr, val);
            } else {
                this->hram[reg] = val;
            }
        } else if(addr >= 0xFE00 && addr < 0xFEA0) {
            this->gameboy->ppu->writeOam(addr, val);
        } else if(addr < 0xFE00) {
            u8 currWramBank = (u8) (this->readIO(SVBK) & 0x7);
            this->wram[currWramBank != 0 ? currWramBank : 1][addr & 0xFFF] = val;
        }
    });
}